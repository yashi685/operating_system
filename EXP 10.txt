#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

// Semaphore for forks
sem_t forks[NUM_PHILOSOPHERS];

// Semaphore to limit the number of philosophers eating simultaneously
sem_t room;

// Function declarations
void* philosopher(void* num);
void pick_up_forks(int philosopher_id);
void put_down_forks(int philosopher_id);
void think(int philosopher_id);
void eat(int philosopher_id);

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int philosopher_ids[NUM_PHILOSOPHERS];

    // Initialize semaphores for forks and room
    sem_init(&room, 0, NUM_PHILOSOPHERS - 1); // Allow at most (NUM_PHILOSOPHERS - 1) philosophers in the room
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&forks[i], 0, 1); // Each fork is initially available
    }

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &philosopher_ids[i]);
    }

    // Wait for all philosopher threads to finish (infinite loop simulation)
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&room);
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&forks[i]);
    }

    return 0;
}

// Philosopher thread function
void* philosopher(void* num) {
    int philosopher_id = *(int*)num;

    while (1) {
        think(philosopher_id);
        sem_wait(&room); // Try to enter the room
        pick_up_forks(philosopher_id);
        eat(philosopher_id);
        put_down_forks(philosopher_id);
        sem_post(&room); // Leave the room
    }
}

void think(int philosopher_id) {
    printf("Philosopher %d is thinking.\n", philosopher_id);
    sleep(rand() % 3); // Simulate thinking time
}

void eat(int philosopher_id) {
    printf("Philosopher %d is eating.\n", philosopher_id);
    sleep(rand() % 3); // Simulate eating time
}

void pick_up_forks(int philosopher_id) {
    // Pick up the left fork
    sem_wait(&forks[philosopher_id]);
    printf("Philosopher %d picked up left fork %d.\n", philosopher_id, philosopher_id);

    // Pick up the right fork
    sem_wait(&forks[(philosopher_id + 1) % NUM_PHILOSOPHERS]);
    printf("Philosopher %d picked up right fork %d.\n", philosopher_id, (philosopher_id + 1) % NUM_PHILOSOPHERS);
}

void put_down_forks(int philosopher_id) {
    // Put down the left fork
    sem_post(&forks[philosopher_id]);
    printf("Philosopher %d put down left fork %d.\n", philosopher_id, philosopher_id);

    // Put down the right fork
    sem_post(&forks[(philosopher_id + 1) % NUM_PHILOSOPHERS]);
    printf("Philosopher %d put down right fork %d.\n", philosopher_id, (philosopher_id + 1) % NUM_PHILOSOPHERS);
}
