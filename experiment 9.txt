import java.util.concurrent.Semaphore;

public class ReadersWriters {
    // Semaphores for synchronization
    private static final Semaphore mutex = new Semaphore(1);      // Protects the reader count
    private static final Semaphore writeLock = new Semaphore(1);  // Ensures mutual exclusion for writers

    // Shared data
    private static int sharedData = 0;  // The shared resource
    private static int readCount = 0;   // Number of active readers

    public static void main(String[] args) {
        // Creating and starting threads for readers and writers
        Thread writer1 = new Thread(new Writer(1));
        Thread writer2 = new Thread(new Writer(2));
        Thread reader1 = new Thread(new Reader(1));
        Thread reader2 = new Thread(new Reader(2));
        Thread reader3 = new Thread(new Reader(3));

        writer1.start();
        reader1.start();
        reader2.start();
        writer2.start();
        reader3.start();
    }

    // Reader class
    static class Reader implements Runnable {
        private final int id;

        Reader(int id) {
            this.id = id;
        }

        @Override
        public void run() {
            try {
                while (true) {
                    // Request access to read
                    mutex.acquire();  // Lock to update the reader count
                    readCount++;
                    if (readCount == 1) {
                        writeLock.acquire();  // First reader locks writers
                    }
                    mutex.release();  // Release the lock after updating reader count

                    // Reading the shared resource
                    System.out.println("Reader " + id + " is reading. Shared Data: " + sharedData);
                    Thread.sleep((long) (Math.random() * 1000));  // Simulate reading time

                    // Finished reading
                    mutex.acquire();  // Lock to update the reader count
                    readCount--;
                    if (readCount == 0) {
                        writeLock.release();  // Last reader unlocks writers
                    }
                    mutex.release();  // Release the lock after updating reader count

                    Thread.sleep((long) (Math.random() * 1000));  // Simulate delay before next read
                }
            } catch (InterruptedException e) {
                System.out.println("Reader " + id + " was interrupted.");
                Thread.currentThread().interrupt();
            }
        }
    }

    // Writer class
    static class Writer implements Runnable {
        private final int id;

        Writer(int id) {
            this.id = id;
        }

        @Override
        public void run() {
            try {
                while (true) {
                    // Request exclusive access to write
                    writeLock.acquire();  // Ensure no readers or writers are active
                    sharedData++;  // Modify the shared resource
                    System.out.println("Writer " + id + " is writing. New Shared Data: " + sharedData);
                    Thread.sleep((long) (Math.random() * 1000));  // Simulate writing time
                    writeLock.release();  // Release the lock

                    Thread.sleep((long) (Math.random() * 1000));  // Simulate delay before next write
                }
            } catch (InterruptedException e) {
                System.out.println("Writer " + id + " was interrupted.");
                Thread.currentThread().interrupt();
            }
        }
    }
}
